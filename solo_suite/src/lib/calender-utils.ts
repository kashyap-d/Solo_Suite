// Calendar export utilities for Apple Calendar (.ics) and Google Calendar

export interface CalendarEvent {
  title: string
  description?: string
  startDate: Date
  endDate?: Date
  location?: string
  url?: string
}

// Generate ICS (iCalendar) format for Apple Calendar and other calendar apps
export function generateICS(events: CalendarEvent[]): string {
  const formatDate = (date: Date): string => {
    return date.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z"
  }

  const escapeText = (text: string): string => {
    return text
      .replace(/\\/g, "\\\\")
      .replace(/;/g, "\\;")
      .replace(/,/g, "\\,")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "")
  }

  const icsContent = [
    "BEGIN:VCALENDAR",
    "VERSION:2.0",
    "PRODID:-//SoloSuite//Project Deadlines//EN",
    "CALSCALE:GREGORIAN",
    "METHOD:PUBLISH",
  ]

  events.forEach((event, index) => {
    const startDate = formatDate(event.startDate)
    const endDate = event.endDate
      ? formatDate(event.endDate)
      : formatDate(new Date(event.startDate.getTime() + 60 * 60 * 1000)) // 1 hour default
    const uid = `deadline-${index}-${Date.now()}@solosuite.com`

    icsContent.push(
      "BEGIN:VEVENT",
      `UID:${uid}`,
      `DTSTAMP:${formatDate(new Date())}`,
      `DTSTART:${startDate}`,
      `DTEND:${endDate}`,
      `SUMMARY:${escapeText(event.title)}`,
      event.description ? `DESCRIPTION:${escapeText(event.description)}` : "",
      event.location ? `LOCATION:${escapeText(event.location)}` : "",
      event.url ? `URL:${event.url}` : "",
      "STATUS:CONFIRMED",
      "TRANSP:OPAQUE",
      "END:VEVENT",
    )
  })

  icsContent.push("END:VCALENDAR")

  return icsContent.filter((line) => line !== "").join("\r\n")
}

// Generate Google Calendar URL
export function generateGoogleCalendarURL(event: CalendarEvent): string {
  const formatGoogleDate = (date: Date): string => {
    return date.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z"
  }

  const startDate = formatGoogleDate(event.startDate)
  const endDate = event.endDate
    ? formatGoogleDate(event.endDate)
    : formatGoogleDate(new Date(event.startDate.getTime() + 60 * 60 * 1000))

  const params = new URLSearchParams({
    action: "TEMPLATE",
    text: event.title,
    dates: `${startDate}/${endDate}`,
    details: event.description || "",
    location: event.location || "",
    sf: "true",
    output: "xml",
  })

  return `https://calendar.google.com/calendar/render?${params.toString()}`
}

// Download ICS file
export function downloadICS(events: CalendarEvent[], filename = "project-deadlines.ics"): void {
  const icsContent = generateICS(events)
  const blob = new Blob([icsContent], { type: "text/calendar;charset=utf-8" })
  const link = document.createElement("a")
  link.href = URL.createObjectURL(blob)
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(link.href)
}

// Open Google Calendar in new tab
export function openGoogleCalendar(event: CalendarEvent): void {
  const url = generateGoogleCalendarURL(event)
  window.open(url, "_blank")
}

// Convert task to calendar event
export function taskToCalendarEvent(task: any): CalendarEvent {
  // Calculate deadline based on estimated hours (assuming 8 hours per day)
  const daysToComplete = Math.ceil(task.estimated_hours / 8)
  const deadline = new Date()
  deadline.setDate(deadline.getDate() + daysToComplete)

  return {
    title: `Project Deadline: ${task.title}`,
    description: `Task: ${task.title}\n\nDescription: ${task.description}\n\nPriority: ${task.priority}\nEstimated Hours: ${task.estimated_hours}\n\nGenerated by SoloSuite`,
    startDate: deadline,
    endDate: new Date(deadline.getTime() + 60 * 60 * 1000), // 1 hour duration
    location: "SoloSuite Project",
    url: window.location.origin + "/dashboard",
  }
}
